'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('sort an array of objects by ascending order', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    var original = [{ Name: "Name", Surname: "Surname" }, { Name: "AAA", Surname: "ZZZ" }, { Name: "Name", Surname: "AAA" }];
    var expected = [{ Name: "Name", Surname: "AAA" }, { Name: "Name", Surname: "Surname" }, { Name: "AAA", Surname: "ZZZ" }];
    var actual = original.slice(0).sort((0, _src.sortObjectsArray)('Surname'));
    t.same(_rec._expr(_rec._capt(actual, 'arguments/0'), {
        content: 't.same(actual, expected)',
        filepath: 'test/sort-objects-array.test.js',
        line: 16
    }), _rec2._expr(_rec2._capt(expected, 'arguments/1'), {
        content: 't.same(actual, expected)',
        filepath: 'test/sort-objects-array.test.js',
        line: 16
    }));
});

(0, _ava2.default)('sort an array of objects by descending order', function (t) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var original = [{ Name: "Name", Surname: "Surname" }, { Name: "AAA", Surname: "ZZZ" }, { Name: "Name", Surname: "AAA" }];
    var expected = [{ Name: "AAA", Surname: "ZZZ" }, { Name: "Name", Surname: "Surname" }, { Name: "Name", Surname: "AAA" }];
    var actual = original.slice(0).sort((0, _src.sortObjectsArray)('-Surname'));
    t.same(_rec3._expr(_rec3._capt(actual, 'arguments/0'), {
        content: 't.same(actual, expected)',
        filepath: 'test/sort-objects-array.test.js',
        line: 31
    }), _rec4._expr(_rec4._capt(expected, 'arguments/1'), {
        content: 't.same(actual, expected)',
        filepath: 'test/sort-objects-array.test.js',
        line: 31
    }));
});

(0, _ava2.default)('will not sort the an array if the property doesn\'t exist', function (t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var original = [{ Name: "Name", Surname: "Surname" }, { Name: "AAA", Surname: "ZZZ" }, { Name: "Name", Surname: "AAA" }];
    var actual = original.slice(0).sort((0, _src.sortObjectsArray)('Middle'));
    t.same(_rec5._expr(_rec5._capt(actual, 'arguments/0'), {
        content: 't.same(actual, original)',
        filepath: 'test/sort-objects-array.test.js',
        line: 41
    }), _rec6._expr(_rec6._capt(original, 'arguments/1'), {
        content: 't.same(actual, original)',
        filepath: 'test/sort-objects-array.test.js',
        line: 41
    }));
});