'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('pads left of the given string', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  var original = '123';
  var expected = 'zz123';
  var padLength = 5;
  var padWith = 'z';
  var actual = (0, _src.padLeft)(original, padLength, padWith);
  t.same(_rec._expr(_rec._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 10
  }), _rec2._expr(_rec2._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 10
  }));
});

(0, _ava2.default)('defaults to pad a zero', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var original = '123';
  var expected = '00123';
  var padLength = 5;
  var actual = (0, _src.padLeft)(original, padLength);
  t.same(_rec3._expr(_rec3._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 18
  }), _rec4._expr(_rec4._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 18
  }));
});

(0, _ava2.default)('does not pad a string longer than the pad length', function (t) {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  var original = '1234';
  var expected = '1234';
  var padLength = 3;
  var actual = (0, _src.padLeft)(original, padLength);
  t.same(_rec5._expr(_rec5._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 26
  }), _rec6._expr(_rec6._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/pad-left.test.js',
    line: 26
  }));
});