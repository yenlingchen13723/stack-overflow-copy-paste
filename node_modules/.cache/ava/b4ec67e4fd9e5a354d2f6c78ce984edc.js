'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var url = 'https://egghead.io/?utm_source=test&utm_medium=code&utm_campaign=contributing-to-open-source';

(0, _ava2.default)('gets the given parameter', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  var name = 'utm_campaign';
  var expected = 'contributing-to-open-source';
  var actual = (0, _src.getQueryStringParam)(url, name);
  t.same(_rec._expr(_rec._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/get-query-string-param.test.js',
    line: 10
  }), _rec2._expr(_rec2._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/get-query-string-param.test.js',
    line: 10
  }));
});

(0, _ava2.default)('returns an empty string if param does not exist', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var name = 'missing-thing';
  var expected = '';
  var actual = (0, _src.getQueryStringParam)(url, name);
  t.same(_rec3._expr(_rec3._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/get-query-string-param.test.js',
    line: 17
  }), _rec4._expr(_rec4._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/get-query-string-param.test.js',
    line: 17
  }));
});