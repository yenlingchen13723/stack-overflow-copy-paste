'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('fills an array with a number', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  var original = [1, 2, 3, 4];
  var expected = [7, 7, 7, 7];
  var actual = (0, _src.arrayFill)(original, 7);
  t.same(_rec._expr(_rec._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 8
  }), _rec2._expr(_rec2._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 8
  }));
});

(0, _ava2.default)('fills an array with a string', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var original = Array(4);
  var expected = ['wookie', 'wookie', 'wookie', 'wookie'];
  var actual = (0, _src.arrayFill)(original, 'wookie');
  t.same(_rec3._expr(_rec3._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 15
  }), _rec4._expr(_rec4._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 15
  }));
});

(0, _ava2.default)('fills an array with a boolean', function (t) {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  var original = Array(4);
  var expected = [false, false, false, false];
  var actual = (0, _src.arrayFill)(original, false);
  t.same(_rec5._expr(_rec5._capt(actual, 'arguments/0'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 22
  }), _rec6._expr(_rec6._capt(expected, 'arguments/1'), {
    content: 't.same(actual, expected)',
    filepath: 'test/array-fill.js',
    line: 22
  }));
});

_ava2.default.todo('allow for non-primitive values like objects, arrays, and dates');