'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('result shouldn\'t be lower than min number', function (t) {
  var _rec = new _powerAssertRecorder();

  var min = 1;
  var max = 10;
  var result = (0, _src.randomInteger)(min, max);
  t.false(_rec._expr(_rec._capt(_rec._capt(result, 'arguments/0/left') < _rec._capt(min, 'arguments/0/right'), 'arguments/0'), {
    content: 't.false(result < min)',
    filepath: 'test/random-integer.test.js',
    line: 8
  }));
});

(0, _ava2.default)('result shouldn\'t be greater than max number', function (t) {
  var _rec2 = new _powerAssertRecorder();

  var min = 1;
  var max = 10;
  var result = (0, _src.randomInteger)(min, max);
  t.false(_rec2._expr(_rec2._capt(_rec2._capt(result, 'arguments/0/left') > _rec2._capt(max, 'arguments/0/right'), 'arguments/0'), {
    content: 't.false(result > max)',
    filepath: 'test/random-integer.test.js',
    line: 15
  }));
});